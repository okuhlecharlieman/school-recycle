{"version":3,"file":"static/js/6131.ef9782e7.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/errors-d961f852.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js","../node_modules/@thirdweb-dev/wallets/dist/url-bc88b2b6.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js"],"sourcesContent":["import { defaultChains } from '@thirdweb-dev/chains';\nimport EventEmitter from 'eventemitter3';\n\nclass WagmiConnector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n    this.chains = chains;\n    this.options = options;\n  }\n  getBlockExplorerUrls(chain) {\n    const explorers = chain.explorers?.map(x => x.url) ?? [];\n    return explorers.length > 0 ? explorers : undefined;\n  }\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.chainId === chainId);\n  }\n  updateChains(chains) {\n    this.chains = chains;\n  }\n}\n\nexport { WagmiConnector as W };\n","import { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\n * @see https://eips.ethereum.org/EIPS/eip-1474\n */\nclass RpcError extends Error {\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    super(`${message}. Cause: ${JSON.stringify(cause)}`);\n    this.cause = cause;\n    this.code = code;\n    this.data = data;\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * @see https://eips.ethereum.org/EIPS/eip-1193\n */\nclass ProviderRpcError extends RpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor( /** Human-readable string */\n  message, options) {\n    const {\n      cause,\n      code,\n      data\n    } = options;\n    if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    super(message, {\n      cause,\n      code,\n      data\n    });\n  }\n}\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"AddChainError\");\n    _defineProperty(this, \"message\", \"Error adding chain\");\n  }\n}\nclass ChainNotConfiguredError extends Error {\n  constructor(_ref) {\n    let {\n      chainId,\n      connectorId\n    } = _ref;\n    super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n    _defineProperty(this, \"name\", \"ChainNotConfigured\");\n  }\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", \"ConnectorNotFoundError\");\n    _defineProperty(this, \"message\", \"Connector not found\");\n  }\n}\nclass ResourceUnavailableError extends RpcError {\n  constructor(cause) {\n    super(\"Resource unavailable\", {\n      cause,\n      code: -32002\n    });\n    _defineProperty(this, \"name\", \"ResourceUnavailable\");\n  }\n}\nclass SwitchChainError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"Error switching chain\", {\n      cause,\n      code: 4902\n    });\n    _defineProperty(this, \"name\", \"SwitchChainError\");\n  }\n}\nclass UserRejectedRequestError extends ProviderRpcError {\n  constructor(cause) {\n    super(\"User rejected request\", {\n      cause,\n      code: 4001\n    });\n    _defineProperty(this, \"name\", \"UserRejectedRequestError\");\n  }\n}\n\n// Ethers does not have an error type so we can use this for casting\n// https://github.com/ethers-io/ethers.js/blob/main/packages/logger/src.ts/index.ts#L268\n\nexport { AddChainError as A, ChainNotConfiguredError as C, ProviderRpcError as P, ResourceUnavailableError as R, SwitchChainError as S, UserRejectedRequestError as U, ConnectorNotFoundError as a };\n","function normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\nexport { normalizeChainId as n };\n","import { getValidChainRPCs } from '@thirdweb-dev/chains';\n\nfunction isTwUrl(url) {\n  const host = new URL(url).hostname;\n  return host.endsWith(\".thirdweb.com\") || host === \"localhost\" || host === \"0.0.0.0\";\n}\nfunction getValidPublicRPCUrl(chain) {\n  return getValidChainRPCs(chain).map(rpc => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch (e) {\n      return rpc;\n    }\n  });\n}\n\nexport { getValidPublicRPCUrl as g, isTwUrl as i };\n","import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError, C as ChainNotConfiguredError, A as AddChainError, S as SwitchChainError } from '../../../../dist/errors-d961f852.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nfunction getInjectedName(ethereum) {\n  if (!ethereum) {\n    return \"Injected\";\n  }\n  const getName = provider => {\n    if (provider.isAvalanche) {\n      return \"Core Wallet\";\n    }\n    if (provider.isBitKeep) {\n      return \"BitKeep\";\n    }\n    if (provider.isBraveWallet) {\n      return \"Brave Wallet\";\n    }\n    if (provider.isCoinbaseWallet) {\n      return \"Coinbase Wallet\";\n    }\n    if (provider.isExodus) {\n      return \"Exodus\";\n    }\n    if (provider.isFrame) {\n      return \"Frame\";\n    }\n    if (provider.isKuCoinWallet) {\n      return \"KuCoin Wallet\";\n    }\n    if (provider.isMathWallet) {\n      return \"MathWallet\";\n    }\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) {\n      return \"1inch Wallet\";\n    }\n    if (provider.isOpera) {\n      return \"Opera\";\n    }\n    if (provider.isPortal) {\n      return \"Ripio Portal\";\n    }\n    if (provider.isTally) {\n      return \"Tally\";\n    }\n    if (provider.isTokenPocket) {\n      return \"TokenPocket\";\n    }\n    if (provider.isTokenary) {\n      return \"Tokenary\";\n    }\n    if (provider.isTrust || provider.isTrustWallet) {\n      return \"Trust Wallet\";\n    }\n    if (provider.isMetaMask) {\n      return \"MetaMask\";\n    }\n  };\n\n  // Some injected providers detect multiple other providers and create a list at `ethers.providers`\n  if (ethereum.providers?.length) {\n    // Deduplicate names using Set\n    // Coinbase Wallet puts multiple providers in `ethereum.providers`\n    const nameSet = new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) {\n      return names;\n    }\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\nvar _provider = /*#__PURE__*/new WeakMap();\nclass InjectedConnector extends WagmiConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      shimDisconnect: true,\n      getProvider: () => {\n        if (assertWindowEthereum(globalThis.window)) {\n          return globalThis.window.ethereum;\n        }\n      }\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options\n    });\n    /**\n     * Name of the injected connector\n     */\n    /**\n     * Whether the connector is ready to be used\n     *\n     * `true` if the injected provider is found\n     */\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    /**\n     * handles the `accountsChanged` event from the provider\n     * * emits `change` event if connected to a different account\n     * * emits `disconnect` event if no accounts available\n     */\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    /**\n     * handles the `chainChanged` event from the provider\n     * * emits `change` event if connected to a different chain\n     */\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    /**\n     * handles the `disconnect` event from the provider\n     * * emits `disconnect` event\n     */\n    _defineProperty(this, \"onDisconnect\", async error => {\n      // We need this as MetaMask can emit the \"disconnect\" event upon switching chains.\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error.code === 1013) {\n        const provider = await this.getProvider();\n        if (provider) {\n          try {\n            const isAuthorized = await this.getAccount();\n            if (isAuthorized) {\n              return;\n            }\n          } catch {\n            // If we can't get the account anymore, continue with disconnect\n          }\n        }\n      }\n      this.emit(\"disconnect\");\n\n      // Remove `shimDisconnect` => it signals that wallet is disconnected\n      if (this.options.shimDisconnect) {\n        await this.connectorStorage.removeItem(this.shimDisconnectKey);\n      }\n    });\n    const _provider2 = options.getProvider();\n\n    // set the name of the connector\n    if (typeof options.name === \"string\") {\n      // if name is given, use that\n      this.name = options.name;\n    } else if (_provider2) {\n      // if injected provider is detected, get name from it\n      const detectedName = getInjectedName(_provider2);\n      if (options.name) {\n        this.name = options.name(detectedName);\n      } else {\n        if (typeof detectedName === \"string\") {\n          this.name = detectedName;\n        } else {\n          this.name = detectedName[0];\n        }\n      }\n    } else {\n      // else default to \"Injected\"\n      this.name = \"Injected\";\n    }\n    this.id = \"injected\";\n    this.ready = !!_provider2;\n    this.connectorStorage = arg.connectorStorage;\n  }\n\n  /**\n   * * Connect to the injected provider\n   * * switch to the given chain if `chainId` is specified as an argument\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // request account addresses from injected provider\n      const accountAddresses = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // get the first account address\n      const firstAccountAddress = utils.getAddress(accountAddresses[0]);\n\n      // Switch to given chain if a chainId is specified\n      let connectedChainId = await this.getChainId();\n      // Check if currently connected chain is unsupported\n      // chainId is considered unsupported if chainId is not in the list of this.chains array\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is specified and it is not the same as the currently connected chain\n      if (options.chainId && connectedChainId !== options.chainId) {\n        // switch to the given chain\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate connectedChainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id: ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options.shimDisconnect) {\n        // add the shim shimDisconnectKey => it signals that wallet is connected\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        account: firstAccountAddress,\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * disconnect from the injected provider\n   */\n  async disconnect() {\n    // perform cleanup\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) {\n      return;\n    }\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n\n    // if shimDisconnect is enabled\n    if (this.options.shimDisconnect) {\n      // Remove the shimDisconnectKey => it signals that wallet is disconnected\n      await this.connectorStorage.removeItem(this.shimDisconnectKey);\n    }\n  }\n\n  /**\n   * @returns The first account address from the injected provider\n   */\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n\n    // return checksum address\n    // https://docs.ethers.org/v5/api/utils/address/#utils-getAddress\n    return utils.getAddress(accounts[0]);\n  }\n\n  /**\n   * @returns The `chainId` of the currently connected chain from injected provider normalized to a `number`\n   */\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n\n  /**\n   * get the injected provider\n   */\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) {\n      _classPrivateFieldSet(this, _provider, provider);\n      // setting listeners\n    }\n\n    return _classPrivateFieldGet(this, _provider);\n  }\n\n  /**\n   * get a `signer` for given `chainId`\n   */\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n\n    // ethers.providers.Web3Provider\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n\n  /**\n   *\n   * @returns `true` if the connector is connected and address is available, else `false`\n   */\n  async isAuthorized() {\n    try {\n      // `false` if connector is disconnected\n      if (this.options.shimDisconnect &&\n      // If shim does not exist in storage, wallet is disconnected\n      !Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        return false;\n      }\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      // `false` if no account address available, else `true`\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      // `false` if any error thrown\n      return false;\n    }\n  }\n\n  /**\n   * switch to given chain\n   */\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    if (!provider) {\n      throw new ConnectorNotFoundError();\n    }\n    const chainIdHex = utils.hexValue(chainId);\n    try {\n      // request provider to switch to given chainIdHex\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainIdHex\n        }]\n      });\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (chain) {\n        return chain;\n      }\n      return {\n        chainId: chainId,\n        name: `Chain ${chainIdHex}`,\n        slug: `${chainIdHex}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpc: [\"\"],\n        chain: \"\",\n        shortName: \"\",\n        testnet: true\n      };\n    } catch (error) {\n      // if could not switch to given chainIdHex\n\n      // if tried to connect to a chain that is not configured\n      const chain = this.chains.find(_chain => _chain.chainId === chainId);\n      if (!chain) {\n        throw new ChainNotConfiguredError({\n          chainId,\n          connectorId: this.id\n        });\n      }\n\n      // if chain is not added to provider\n      if (error.code === 4902 ||\n      // Unwrapping for MetaMask Mobile\n      // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n      error?.data?.originalError?.code === 4902) {\n        try {\n          // request provider to add chain\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: chainIdHex,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: getValidPublicRPCUrl(chain),\n              // no client id on purpose here\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          // if user rejects request to add chain\n          if (this.isUserRejectedRequestError(addError)) {\n            throw new UserRejectedRequestError(error);\n          }\n\n          // else other error\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n}\n\nexport { InjectedConnector };\n"],"names":["WagmiConnector","_EventEmitter","_inherits","_super","_createSuper","_ref","_this","_classCallCheck","_ref$chains","chains","defaultChains","options","call","_createClass","key","value","chain","_chain$explorers$map","_chain$explorers","explorers","map","x","url","length","undefined","chainId","this","some","EventEmitter","RpcError","_Error","message","cause","code","data","Number","isInteger","Error","concat","JSON","stringify","_wrapNativeSuper","ProviderRpcError","_RpcError","_super2","AddChainError","_Error2","_super3","_this2","apply","arguments","_defineProperty","_assertThisInitialized","ChainNotConfiguredError","_Error3","_super4","_this3","connectorId","ConnectorNotFoundError","_Error4","_super5","_this4","ResourceUnavailableError","_RpcError2","_super6","_this5","SwitchChainError","_ProviderRpcError","_super7","_this6","UserRejectedRequestError","_ProviderRpcError2","_super8","_this7","normalizeChainId","parseInt","trim","substring","isTwUrl","host","URL","hostname","endsWith","getValidPublicRPCUrl","getValidChainRPCs","rpc","pathname","search","toString","e","_provider","WeakMap","InjectedConnector","_WagmiConnector","arg","defaultOptions","shimDisconnect","getProvider","assertWindowEthereum","globalThis","window","ethereum","_objectSpread","_classPrivateFieldInitSpec","writable","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accounts","wrap","_context","prev","next","emit","account","utils","stop","_x","id","unsupported","isChainUnsupported","_ref2","_callee2","error","_context2","sent","getAccount","abrupt","t0","connectorStorage","removeItem","shimDisconnectKey","_x2","_provider2","name","detectedName","_ethereum$providers","_getName","getName","provider","isAvalanche","isBitKeep","isBraveWallet","isCoinbaseWallet","isExodus","isFrame","isKuCoinWallet","isMathWallet","isOneInchIOSWallet","isOneInchAndroidWallet","isOpera","isPortal","isTally","isTokenPocket","isTokenary","isTrust","isTrustWallet","isMetaMask","providers","_names$","_step","nameSet","Set","unknownCount","_iterator","_createForOfIteratorHelper","s","n","done","add","err","f","names","_toConsumableArray","getInjectedName","ready","_connect","_callee3","accountAddresses","firstAccountAddress","connectedChainId","isUnsupported","connectionInfo","_args3","_context3","setupListeners","type","request","method","getChainId","switchChain","console","setItem","t1","isUserRejectedRequestError","_disconnect","_callee4","_context4","removeListener","onAccountsChanged","onChainChanged","onDisconnect","_getAccount","_callee5","_context5","_getChainId","_callee6","_context6","then","_getProvider","_callee7","_context7","_classPrivateFieldSet","_classPrivateFieldGet","_getSigner","_callee8","_yield$Promise$all","_yield$Promise$all2","_args8","_context8","Promise","all","_slicedToArray","getSigner","_isAuthorized","_callee9","_context9","Boolean","getItem","t2","t3","_switchChain","_callee10","chainIdHex","_error$data","_chain2","_context10","params","find","_chain","slug","nativeCurrency","decimals","symbol","shortName","testnet","originalError","chainName","rpcUrls","blockExplorerUrls","getBlockExplorerUrls","_x3","_setupListeners","_callee11","_context11","on"],"sourceRoot":""}