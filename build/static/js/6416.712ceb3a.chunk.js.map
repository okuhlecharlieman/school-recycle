{"version":3,"file":"static/js/6416.712ceb3a.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-7b47bd46.browser.esm.js","../node_modules/@thirdweb-dev/sdk/dist/nft-collection-eb32ebb2.browser.esm.js"],"sourcesContent":["import { aD as Erc721, cG as resolveAddress, dt as buildTransactionFunction, aW as Transaction } from './contract-publisher-f8af509d.browser.esm.js';\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwned(walletAddress);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get total minted supply count\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n}\n\nexport { StandardErc721 as S };\n","import { dG as NFT_BASE_CONTRACT_ROLES, ds as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dR as TokenErc721ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aT as ContractPlatformFee, aS as ContractInterceptor, aE as Erc721WithQuantitySignatureMintable, aV as ContractOwner, bI as getRoleHash, dt as buildTransactionFunction, aW as Transaction } from './contract-publisher-f8af509d.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-7b47bd46.browser.esm.js';\nimport { constants } from 'ethers';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/storage';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport 'eventemitter3';\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-collection\");\n * ```\n *\n * @public\n */\nclass NFTCollection extends StandardErc721 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTCollection.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mint(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return this.erc721.mint.prepare(metadata);\n  });\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (walletAddress, metadata) => {\n    return this.erc721.mintTo.prepare(walletAddress, metadata);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadata - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(receiver, metadata) {\n    return this.erc721.getMintTransaction(receiver, metadata);\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return this.erc721.mintBatch.prepare(metadata);\n  });\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (walletAddress, metadata) => {\n    return this.erc721.mintBatchTo.prepare(walletAddress, metadata);\n  });\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { NFTCollection };\n"],"names":["StandardErc721","contractWrapper","storage","chainId","_this","_classCallCheck","_defineProperty","buildTransactionFunction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","to","tokenId","wrap","_context","prev","next","abrupt","erc721","transfer","prepare","stop","_x","_x2","apply","arguments","_ref2","_callee2","operator","approved","_context2","setApprovalForAll","_x3","_x4","_ref3","_callee3","_context3","t0","Transaction","t1","resolveAddress","t2","sent","t3","t4","t5","method","args","fromContractWrapper","call","_x5","_x6","this","Erc721","_chainId","_createClass","key","get","value","network","updateSignerOrProvider","readContract","address","_getAll","_callee4","queryParams","_context4","getAll","_x7","_getOwned","_callee5","walletAddress","_context5","getOwned","_x8","_getOwnedTokenIds","_callee6","_context6","getOwnedTokenIds","_x9","_totalSupply","_callee7","_context7","totalCirculatingSupply","_get","_callee8","_context8","_x10","_ownerOf","_callee9","_context9","ownerOf","_x11","_balanceOf","_callee10","_context10","balanceOf","_x12","_balance","_callee11","_context11","balance","_isApproved","_callee12","_context12","isApproved","_x13","_x14","NFTCollection","_StandardErc","_inherits","_super","_createSuper","options","length","undefined","abi","ContractWrapper","_assertThisInitialized","metadata","mint","mintTo","mintBatch","_ref4","mintBatchTo","burn","AbiSchema","parse","ContractMetadata","TokenErc721ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","signature","Erc721WithQuantitySignatureMintable","owner","ContractOwner","_isTransferRestricted","anyoneCanTransfer","hasRole","getRoleHash","constants","_getMintTransaction","receiver","getMintTransaction","_prepare","overrides","_call","functionName","NFT_BASE_CONTRACT_ROLES"],"sourceRoot":""}