{"version":3,"file":"static/js/3994.695af967.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { a as ConnectorNotFoundError, U as UserRejectedRequestError, R as ResourceUnavailableError } from '../../../../dist/errors-d961f852.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-80704ff6.browser.esm.js';\nimport { InjectedConnector } from '../../injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js';\nimport { utils } from 'ethers';\nimport { g as getInjectedMetamaskProvider } from '../../../../dist/getInjectedMetamaskProvider-2a422f86.browser.esm.js';\nimport '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\nimport '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\n\nvar _UNSTABLE_shimOnConnectSelectAccount = /*#__PURE__*/new WeakMap();\nclass MetaMaskConnector extends InjectedConnector {\n  constructor(arg) {\n    const defaultOptions = {\n      name: \"MetaMask\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider: getInjectedMetamaskProvider\n    };\n    const options = {\n      ...defaultOptions,\n      ...arg.options\n    };\n    super({\n      chains: arg.chains,\n      options,\n      connectorStorage: arg.connectorStorage\n    });\n    _defineProperty(this, \"id\", walletIds.metamask);\n    _classPrivateFieldInitSpec(this, _UNSTABLE_shimOnConnectSelectAccount, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n  }\n\n  /**\n   * Connect to injected MetaMask provider\n   */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) {\n        throw new ConnectorNotFoundError();\n      }\n      this.setupListeners();\n\n      // emit \"connecting\" event\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n\n      // Attempt to show wallet select prompt with `wallet_requestPermissions` when\n      // `shimDisconnect` is active and account is in disconnected state (flag in storage)\n      let account = null;\n      if (_classPrivateFieldGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))) {\n        account = await this.getAccount().catch(() => null);\n        const isConnected = !!account;\n        if (isConnected) {\n          // Attempt to show another prompt for selecting wallet if already connected\n          try {\n            await provider.request({\n              method: \"wallet_requestPermissions\",\n              params: [{\n                eth_accounts: {}\n              }]\n            });\n          } catch (error) {\n            // Not all MetaMask injected providers support `wallet_requestPermissions` (e.g. MetaMask iOS).\n            // Only bubble up error if user rejects request\n            if (this.isUserRejectedRequestError(error)) {\n              throw new UserRejectedRequestError(error);\n            }\n          }\n        }\n      }\n\n      // if account is not already set, request accounts and use the first account\n      if (!account) {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        account = utils.getAddress(accounts[0]);\n      }\n\n      // get currently connected chainId\n      let connectedChainId = await this.getChainId();\n      // check if connected chain is unsupported\n      let isUnsupported = this.isChainUnsupported(connectedChainId);\n\n      // if chainId is given, but does not match the currently connected chainId, switch to the given chainId\n      if (options.chainId && connectedChainId !== options.chainId) {\n        try {\n          await this.switchChain(options.chainId);\n          // recalculate the chainId and isUnsupported\n          connectedChainId = options.chainId;\n          isUnsupported = this.isChainUnsupported(options.chainId);\n        } catch (e) {\n          console.error(`Could not switch to chain id : ${options.chainId}`, e);\n        }\n      }\n\n      // if shimDisconnect is enabled\n      if (this.options?.shimDisconnect) {\n        // add shimDisconnectKey in storage - this signals that connector is \"connected\"\n        await this.connectorStorage.setItem(this.shimDisconnectKey, \"true\");\n      }\n      const connectionInfo = {\n        chain: {\n          id: connectedChainId,\n          unsupported: isUnsupported\n        },\n        provider: provider,\n        account\n      };\n      this.emit(\"connect\", connectionInfo);\n      return connectionInfo;\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) {\n        throw new UserRejectedRequestError(error);\n      }\n      if (error.code === -32002) {\n        throw new ResourceUnavailableError(error);\n      }\n      throw error;\n    }\n  }\n  async switchAccount() {\n    const provider = await this.getProvider();\n    await provider.request({\n      method: \"wallet_requestPermissions\",\n      params: [{\n        eth_accounts: {}\n      }]\n    });\n  }\n}\n\nexport { MetaMaskConnector };\n"],"names":["_UNSTABLE_shimOnConnectSelectAccount","WeakMap","MetaMaskConnector","_InjectedConnector","_inherits","_super","_createSuper","arg","_this","_classCallCheck","defaultOptions","name","shimDisconnect","shimChainChangedDisconnect","getProvider","getInjectedMetamaskProvider","options","_objectSpread","call","chains","connectorStorage","_defineProperty","_assertThisInitialized","walletIds","metamask","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","UNSTABLE_shimOnConnectSelectAccount","_createClass","key","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$options","_this$options2","provider","account","accounts","connectedChainId","isUnsupported","connectionInfo","_args","arguments","wrap","_context","prev","next","length","undefined","this","sent","ConnectorNotFoundError","setupListeners","emit","type","_classPrivateFieldGet","Boolean","getItem","shimDisconnectKey","getAccount","catch","request","method","params","eth_accounts","t0","isUserRejectedRequestError","UserRejectedRequestError","utils","getChainId","isChainUnsupported","chainId","switchChain","t1","console","error","concat","setItem","chain","id","unsupported","abrupt","t2","code","ResourceUnavailableError","stop","apply","_switchAccount","_callee2","_context2","InjectedConnector"],"sourceRoot":""}